name: Build & Sign Release APK

on:
  workflow_dispatch:
  push:
    paths:
      - 'Rechnungsstempel-Android.zip'
      - '.github/workflows/release.yml'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Unzip Android project
        run: |
          unzip -o Rechnungsstempel-Android.zip
          ls -la

      - name: Set up JDK 17 (Temurin) + Gradle (ohne Wrapper)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      - name: Setup Gradle 8.10
        uses: gradle/actions/setup-gradle@v5
        with:
          gradle-version: '8.10'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install SDK 34
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # JitPack in settings.gradle aktivieren (für PhotoView)
      - name: Add JitPack to settings.gradle
        shell: bash
        run: |
          if grep -q 'dependencyResolutionManagement' settings.gradle; then
            # JitPack in bestehendem repositories{}-Block ergänzen
            sed -i '/repositoriess*{/a        maven { url "https://jitpack.io" }' settings.gradle
          else
            # Falls dein settings.gradle noch keinen Block hat: komplett hinzufügen
            cat >> settings.gradle <<'EOF'
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}
EOF
          fi
          echo "---- settings.gradle ----"
          sed -n '1,200p' settings.gradle

      - name: Assemble release (unsigned)
        run: gradle assembleRelease --no-daemon --stacktrace

      - name: Generate temporary keystore
        run: |
          STORE_PW=$(openssl rand -hex 16)
          KEY_PW=$(openssl rand -hex 16)
          ALIAS=app
          echo "STORE_PW=$STORE_PW" >> $GITHUB_ENV
          echo "KEY_PW=$KEY_PW" >> $GITHUB_ENV
          echo "ALIAS=$ALIAS"   >> $GITHUB_ENV
          keytool -genkeypair -v -keystore release-key.jks \n            -storepass "$STORE_PW" -keypass "$KEY_PW" -alias "$ALIAS" \n            -keyalg RSA -keysize 2048 -validity 36500 \n            -dname "CN=Svjatoslav,O=Org,L=Hamburg,S=HH,C=DE"

      - name: Zipalign (before signing)
        run: |
          IN=app/build/outputs/apk/release/app-release-unsigned.apk
          OUT_ALIGNED=app/build/outputs/apk/release/app-release-aligned.apk
          $ANDROID_HOME/build-tools/34.0.0/zipalign -P 16 -f -v 4 "$IN" "$OUT_ALIGNED"
          $ANDROID_HOME/build-tools/34.0.0/zipalign -c -P 16 -v 4 "$OUT_ALIGNED"

      - name: Sign APK
        run: |
          OUT_ALIGNED=app/build/outputs/apk/release/app-release-aligned.apk
          OUT_SIGNED=app/build/outputs/apk/release/app-release-signed.apk
          $ANDROID_HOME/build-tools/34.0.0/apksigner sign \n            --ks release-key.jks \n            --ks-pass pass:$STORE_PW \n            --key-pass pass:$KEY_PW \n            --ks-key-alias $ALIAS \n            --out "$OUT_SIGNED" \n            "$OUT_ALIGNED"
          $ANDROID_HOME/build-tools/34.0.0/apksigner verify --verbose "$OUT_SIGNED"

      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: rechnungsstempel-release-signed
          path: app/build/outputs/apk/release/app-release-signed.apk
